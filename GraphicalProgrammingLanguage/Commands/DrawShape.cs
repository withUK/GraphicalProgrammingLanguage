using GraphicalProgrammingLanguage.Enums;
using GraphicalProgrammingLanguage.Factories;
using GraphicalProgrammingLanguage.Shapes;
using System;
using System.Collections.Generic;

namespace GraphicalProgrammingLanguage.Commands
{
    /// <summary>
    /// The draw shape command is the main call when wanting to draw any of the shapes defined within the
    /// application which are generated by the ShapeFactory.
    /// With the dictionary parameters passed to the Set method or the Constructor the values are then passed
    /// to the shape class to be populated which inturn executes.
    /// 
    /// Syntax example : 
    /// Inline example
    ///     drawshape(type=circle,x=2,y=2,radius=50)
    ///     drawshape(type=square,x=2,y=2,length=50)
    /// Seperate example
    ///     drawshape
    ///     type=circle
    ///     x=5
    ///     y=5
    ///     radius=50
    /// </summary>
    public class DrawShape : Command
    {
        #region Properties
        protected ShapeFactory factory = new ShapeFactory();
        protected Shape shape { get; set; }
        #endregion

        #region Constructors
        public DrawShape(MainGUI main) : base(main)
        {
            name = CommandTypes.drawshape.ToString();
        }

        public DrawShape(MainGUI main, Dictionary<string, string> variables) : base(main, variables)
        {
            name = CommandTypes.drawshape.ToString();
            if (variables.ContainsKey("type"))
            {
                shape = factory.GetShape(main, variables.GetValueOrDefault("type").ToString());
            }
        }
        #endregion

        #region Overrides
        /// <summary>
        /// Takes variables passed to the method from within the variables dictionary and assigns them to the relevent
        /// fields ready for execution when completed.
        /// </summary>
        /// <param name="variables">A dictionary object to hold string values which can be parsed where required.</param>
        public void set(Dictionary<string, string> variables)
        {
            if (variables != null)
            {
                this.variables = variables;
                if (variables.ContainsKey("type"))
                {
                    shape = factory.GetShape(main, variables.GetValueOrDefault("type"));
                    shape.Set(variables);
                }
            }
        }

        /// <summary>
        /// Begins the command if valid and draws the defined shape to the graphic object in the MainGUI.
        /// If not valid then message added to the log.
        /// </summary>
        public override void Execute()
        {
            if (IsValid(this.variables))
            {
                Log(main);
                shape.Draw(main.dc);
            }
            else
            {
                Logger.Log($"Unable to execute {name}");
            }
        }

        /// <summary>
        /// Ensures the shape object has been instansiated and then makes use of the shapes own HasRequiredParameters 
        /// method as that is the object that requires the variables to successfully execute.
        /// </summary>
        /// <returns>Returns true if object has required parameters to build the specified shape.</returns>
        public override bool hasRequiredParameters()
        {
            if (shape != null)
            {
                return shape.HasRequiredVariables();
            }
            return false;
        }

        /// <summary>
        /// This method is implemented based on the shape having the correct variables and so make use of the
        /// hasRequiredParameters() method.
        /// </summary>
        /// <param name="variables">A dictionary object to hold string values which can be parsed where required.</param>
        /// <returns>Returns true if object has required parameters to build the specified shape.</returns>
        public override bool IsValid(Dictionary<string, string> variables)
        {
            return hasRequiredParameters();
        }
        #endregion
    }
}
